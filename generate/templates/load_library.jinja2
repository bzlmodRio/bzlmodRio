load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
load("//private/non_bzlmod:create_null_repository.bzl", "create_null_repository")

def load_{{repo.replace('-', "_")}}(version, local_monorepo_base):
    if native.existing_rule("{{repo}}"):
        print("Repo {{repo}} has already been defined")
        return

    if version == None:
        create_null_repository(
            name = "{{repo}}",
            sanitized_repo_name = "{{repo.replace("-", "_")}}",
        )
        return

    if version == "local":
        print("Using local {{repo}}")
        native.local_repository(
            name = "{{repo}}",
            path = local_monorepo_base + "/{{"rules" if "rules" in repo else "libraries"}}/{{repo.replace('bzlmodrio', 'bzlmodRio')}}",
        )
        return
{%- for version, version_info in repo_info.items() %}
    elif version == "{{version}}":
        sha = "{{version_info.sha}}"
{%- endfor %}
    else:
        fail("Unsupported version {}".format(version))

    maybe(
        http_archive,
        name = "{{repo}}",
        sha256 = sha,
        url = "https://github.com/bzlmodRio/{{repo.replace('bzlmodrio', 'bzlmodRio')}}/releases/download/{}/{{repo.replace('bzlmodrio', 'bzlmodRio')}}-{}.tar.gz".format(version, version),
    )

